name: Build and Deploy Recommend API

on:
  push:
    paths:
      - 'application/recommendApi/**'
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write  # Se usar OIDC para AWS
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # 1. Configurar credenciais AWS (para acessar ECR, ECS etc.)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 2. Build do Docker da pasta application/recommendApi
      - name: Build Docker image
        run: |
          cd application/recommendApi
          docker build -t recommendapi:latest .

      # 3. Login no ECR e Push da imagem
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}
        

      - name: Tag and Push
        run: |
          docker tag recommendapi:latest ${{ secrets.ECR_URI }}/globo_recommend:recommend-api-latest
          docker push ${{ secrets.ECR_URI }}/globo_recommend:recommend-api-latest

      # 4. (Opcional) Executar ou atualizar a Tarefa ECS Fargate
      # Se quiser rodar um "RunTask" (Task "one-shot"):
      #- name: Run ECS Task
      #  run: |
      #   aws ecs run-task --cluster globo_recommend-ecs-cluster \
      #                    --launch-type FARGATE \
      #                    --network-configuration "awsvpcConfiguration={subnets=[$(aws ec2 describe-subnets \
      #                      --filters Name=vpc-id,Values=$(aws ec2 describe-vpcs \
      #                      --filters Name=tag:Name,Values=globo-vpc --query 'Vpcs[0].VpcId' --output text) \
      #                      Name=tag:Name,Values=globo-public-subnet --query 'Subnets[0].SubnetId' --output text)],securityGroups=[$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=globo-ecs-sg --query 'SecurityGroups[0].GroupId' --output text)],assignPublicIp=ENABLED}" \
      #                    --task-definition $(aws ecs list-task-definitions \
      #                       --family-prefix recommend-api-task --sort DESC \
      #                       --max-items 1 --query 'taskDefinitionArns[0]' --output text)        

        # Atualizar a Task Definition para usar a nova imagem
      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster globo_recommend-ecs-cluster \
                                 --service recommend-api-service \
                                 --force-new-deployment