name: Build and Deploy FeatureStoreEngine

on:
  push:
    paths:
      - 'application/featureStoreEngine/**'
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write  # Se usar OIDC para AWS
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # 1. Configurar credenciais AWS (para acessar ECR, ECS etc.)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 2. Build do Docker da pasta application/featureStoreEngine
      - name: Build Docker image
        run: |
          cd application/featureStoreEngine
          docker build -t featurestoreengine:latest .

      # 3. Login no ECR e Push da imagem
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}
        

      - name: Tag and Push
        run: |
          docker tag featurestoreengine:latest ${{ secrets.ECR_URI }}/globo_recommend:featstore-latest
          docker push ${{ secrets.ECR_URI }}/globo_recommend:featstore-latest

      # 4. (Opcional) Executar ou atualizar a Tarefa ECS Fargate
      # Se quiser rodar um "RunTask" (Task "one-shot"):
      - name: Run ECS Task
        run: |
          aws ecs run-task --cluster globo_recommend-ecs-cluster \
                           --launch-type FARGATE \
                           --network-configuration "awsvpcConfiguration={subnets=[subnet-0fe505b6ab2450770],assignPublicIp=ENABLED}" \
                           --task-definition $(aws ecs list-task-definitions --family-prefix featstore-task-2 --sort DESC --max-items 1 --query 'taskDefinitionArns[0]' --output text)
          # Ajuste "task-definition" e "subnets" conforme seu ECS e Terraform
