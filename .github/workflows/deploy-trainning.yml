name: Build and Deploy TrainningModel

on:
  push:
    paths:
      - 'application/trainningModel/**'
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write  # Se usar OIDC para AWS
      
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # 1. Configurar credenciais AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 2. Build do Docker da pasta TrainningModel
      - name: Build Docker image
        run: |
          cd application/trainningModel
          docker build -t trainningmodel:latest .

      # 3. Login no ECR e Push
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      - name: Tag and Push
        run: |
          docker tag trainningmodel:latest ${{ secrets.ECR_URI }}/globo_recommend:trainning-latest
          docker push ${{ secrets.ECR_URI }}/globo_recommend:trainning-latest


      # 4. Executar nova Task ECS (opcional)
      - name: Run ECS Task
        run: |
          aws ecs run-task --cluster globo_recommend-ecs-cluster \
                           --launch-type EC2 \
                           --network-configuration "awsvpcConfiguration={subnets=[subnet-0b9d98b0a2b8ba57d],securityGroups=[sg-09ec81b68014c2ffa]}" \
                           --task-definition arn:aws:ecs:us-east-1:353061803834:task-definition/trainning-task:8
